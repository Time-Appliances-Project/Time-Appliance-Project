"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[494],{2420:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=a(8168),n=(a(6540),a(5680));const i={sidebar_position:1},o="The Firmware Tool",l={unversionedId:"software/tft",id:"software/tft",title:"The Firmware Tool",description:"This is a simple tool to add a header to a raw firmware binary. The header is used by a driver to check if the hardware is compatible with the image. The header is only 16 bytes long and contains a PCI Vendor ID, a PCI Device ID and a PCI Hardware Revision ID values to check. It also contains the CRC value of the raw image. The reason to add a header is to be sure that incompatible firware will not be written to the device via devlink unintentionally.",source:"@site/docs/software/tft.md",sourceDirName:"software",slug:"/software/tft",permalink:"/Time-Appliance-Project/docs/software/tft",draft:!1,editUrl:"https://github.com/opencomputeproject/Time-Appliance-Project/tree/master/website/docs/software/tft.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Software",permalink:"/Time-Appliance-Project/docs/category/software"},next:{title:"Clientgen",permalink:"/Time-Appliance-Project/docs/software/clientgen"}},s={},d=[{value:"Header format",id:"header-format",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2}],p={toc:d},c="wrapper";function m(e){let{components:t,...a}=e;return(0,n.yg)(c,(0,r.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"the-firmware-tool"},"The Firmware Tool"),(0,n.yg)("p",null,"This is a simple tool to add a header to a raw firmware binary. The header is used by a driver to check if the hardware is compatible with the image. The header is only 16 bytes long and contains a PCI Vendor ID, a PCI Device ID and a PCI Hardware Revision ID values to check. It also contains the CRC value of the raw image. The reason to add a header is to be sure that incompatible firware will not be written to the device via devlink unintentionally."),(0,n.yg)("h2",{id:"header-format"},"Header format"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"center"},"Magic Bytes"),(0,n.yg)("th",{parentName:"tr",align:"center"},"PCI Vendor ID"),(0,n.yg)("th",{parentName:"tr",align:"center"},"PCI Device ID"),(0,n.yg)("th",{parentName:"tr",align:"center"},"Image size"),(0,n.yg)("th",{parentName:"tr",align:"center"},"HW Rev ID"),(0,n.yg)("th",{parentName:"tr",align:"center"},"CRC16"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"center"},"4 bytes"),(0,n.yg)("td",{parentName:"tr",align:"center"},"2 bytes"),(0,n.yg)("td",{parentName:"tr",align:"center"},"2 bytes"),(0,n.yg)("td",{parentName:"tr",align:"center"},"4 bytes"),(0,n.yg)("td",{parentName:"tr",align:"center"},"2 bytes"),(0,n.yg)("td",{parentName:"tr",align:"center"},"2 bytes")))),(0,n.yg)("p",null,"The firmware header consists 6 fields, all values are network order to be consistent across architectures:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Magic header (4 bytes, 32 bits) - constant value, \u2018OCTC\u2019 means Open Compute Time Card"),(0,n.yg)("li",{parentName:"ol"},"PCI Vendor ID (2 bytes, 16 bits) - PCI device vendor ID compatible with this image"),(0,n.yg)("li",{parentName:"ol"},"PCI Device ID (2 bytes, 16 bits) - PCI device ID compatible with this image"),(0,n.yg)("li",{parentName:"ol"},"Image size (4 bytes, 32 bits, unsigned) - size of firmware itself without header (and footer should we have one)"),(0,n.yg)("li",{parentName:"ol"},"HW Revision (2 bytes, 16 bits) - Information provided by HW register to differentiate revisions of the same board"),(0,n.yg)("li",{parentName:"ol"},"CRC16 (2 bytes, 16 bits) - check value of CRC16 implementation with default polynom implemented in kernel")),(0,n.yg)("h2",{id:"usage"},"Usage"),(0,n.yg)("p",null,"The tool has several options:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-input <filename>")," - Mandatory option, provides a file name of a raw binary."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-output <filename>")," - Mandatory option, provides a file name to write a new firmware file with header. If file already exists it will be overwritten."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-vendor <int>")," - Mandatory option, provides a PCI Vendor ID to add to header."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-device <int>")," - Mandatory option, provides a PCI Device ID to add to header."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-hw <int>")," - Optional, used to provide a PCI Hardware Rev ID. Default is 0."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-apply")," - Optional. This is used to actually create a new (or overwrite) output file with the header in the beginning.")),(0,n.yg)("h2",{id:"examples"},"Examples"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"./tft -input Time-Card/FPGA/Binary/Production/Binaries/TimeCardProduction.bin -output TimeCardProduction_Celestica.bin -vendor 0x18d4 -device 0x1008 -apply\n")),(0,n.yg)("p",null,"This call will create ",(0,n.yg)("inlineCode",{parentName:"p"},"TimeCardProduction_Celestica.bin")," with header for timecard produced by Celestica."))}m.isMDXComponent=!0},5680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>u});var r=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(a),y=n,u=c["".concat(s,".").concat(y)]||c[y]||m[y]||i;return a?r.createElement(u,o(o({ref:t},p),{},{components:a})):r.createElement(u,o({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"}}]);
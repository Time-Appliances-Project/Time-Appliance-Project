"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[359],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,g=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[c]="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(8168),r=(n(6540),n(5680));const i={sidebar_position:3},l="Usage",p={unversionedId:"time-card/usage",id:"time-card/usage",title:"Usage",description:"Time Card is interfaced via sysfs.",source:"@site/docs/time-card/usage.md",sourceDirName:"time-card",slug:"/time-card/usage",permalink:"/Time-Appliance-Project/docs/time-card/usage",draft:!1,editUrl:"https://github.com/opencomputeproject/Time-Appliance-Project/tree/master/website/docs/time-card/usage.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"SLES",permalink:"/Time-Appliance-Project/docs/time-card/kernel/kernel-sles-installation"},next:{title:"Advanced Usage",permalink:"/Time-Appliance-Project/docs/time-card/advanced-usage"}},o={},s=[{value:"Sysfs",id:"sysfs",level:3},{value:"Serial ports and PHC number",id:"serial-ports-and-phc-number",level:3},{value:"Using Time Card IO",id:"using-time-card-io",level:2},{value:"Ouputs",id:"ouputs",level:3},{value:"Inputs",id:"inputs",level:3},{value:"Configure SMA ports",id:"configure-sma-ports",level:4},{value:"Download <code>testptp</code> source",id:"download-testptp-source",level:4},{value:"Read timestamped signals",id:"read-timestamped-signals",level:4}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(c,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"usage"},"Usage"),(0,r.yg)("p",null,"Time Card is interfaced via ",(0,r.yg)("inlineCode",{parentName:"p"},"sysfs"),"."),(0,r.yg)("h3",{id:"sysfs"},"Sysfs"),(0,r.yg)("p",null,"To view all the ",(0,r.yg)("inlineCode",{parentName:"p"},"sysfs")," parameters exposed,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"ls /sys/class/timecard/ocp0/\n")),(0,r.yg)("p",null,"Additional Time Card devices will enumerate as ",(0,r.yg)("inlineCode",{parentName:"p"},"ocpN")," where ",(0,r.yg)("inlineCode",{parentName:"p"},"N")," is the device order."),(0,r.yg)("h3",{id:"serial-ports-and-phc-number"},"Serial ports and PHC number"),(0,r.yg)("p",null,"Serial ports and PHC number can be found via ",(0,r.yg)("inlineCode",{parentName:"p"},"dmesg")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"ls -l")),(0,r.yg)("h2",{id:"using-time-card-io"},"Using Time Card IO"),(0,r.yg)("h3",{id:"ouputs"},"Ouputs"),(0,r.yg)("p",null,"All possible outputs are available via ",(0,r.yg)("inlineCode",{parentName:"p"},"available_sma_outputs"),","),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"cat available_sma_outputs\n")),(0,r.yg)("p",null,"Will display all possible output types such as,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"10Mhz PHC MAC GNSS1 GNSS2 IRIG DCF GEN1 GEN2 GEN3 GEN4 GND VCC\n")),(0,r.yg)("p",null,"A few examples are shown below for configuring the output signals,"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Output FPGA PPS on SMA")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"echo OUT: PHC >> sma1\n")),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"Output Atomic clock PPS on SMA")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"echo OUT: MAC >> sma1\n")),(0,r.yg)("ol",{start:3},(0,r.yg)("li",{parentName:"ol"},"Output GPS Module's PPS on SMA")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"echo OUT: GNSS1 >> sma1\n")),(0,r.yg)("h3",{id:"inputs"},"Inputs"),(0,r.yg)("p",null,"All possible inputs are available via ",(0,r.yg)("inlineCode",{parentName:"p"},"available_sma_inputs"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"cat available_sma_inputs\n")),(0,r.yg)("p",null,"Will display all possible inputs types such as,"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"10Mhz PPS1 PPS2 TS1 TS2 IRIG DCF TS3 TS4 FREQ1 FREQ2 FREQ3 FREQ4 None\n")),(0,r.yg)("p",null,"A few examples are shown below for configuring the input signals,"),(0,r.yg)("h4",{id:"configure-sma-ports"},"Configure SMA ports"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Use a port for time-stamping incoming signals, this configured ",(0,r.yg)("inlineCode",{parentName:"li"},"SMA1")," with timestamper-1 ",(0,r.yg)("inlineCode",{parentName:"li"},"TS1"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"echo IN: TS1 >> sma1\n")),(0,r.yg)("p",null,"To read back the timestamped signals, use ",(0,r.yg)("inlineCode",{parentName:"p"},"testptp"),"."),(0,r.yg)("h4",{id:"download-testptp-source"},"Download ",(0,r.yg)("inlineCode",{parentName:"h4"},"testptp")," source"),(0,r.yg)("p",null,"Source available at these locations"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"https://www.mjmwired.net/kernel/Documentation/ptp/testptp.c"},"https://www.mjmwired.net/kernel/Documentation/ptp/testptp.c")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/torvalds/linux/blob/master/tools/testing/selftests/ptp/testptp.c"},"https://github.com/torvalds/linux/blob/master/tools/testing/selftests/ptp/testptp.c"))),(0,r.yg)("h4",{id:"read-timestamped-signals"},"Read timestamped signals"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Note: ")," ",(0,r.yg)("inlineCode",{parentName:"p"},"-1")," for inifite readings, use a positive number for fixed event count, from ",(0,r.yg)("inlineCode",{parentName:"p"},"Timestamper 1")," ",(0,r.yg)("inlineCode",{parentName:"p"},"-i 1")," from the Time Card ",(0,r.yg)("inlineCode",{parentName:"p"},"/dev/ptp1")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"./testptp -d /dev/ptp1 -e -1 -i 1\n")))}d.isMDXComponent=!0}}]);